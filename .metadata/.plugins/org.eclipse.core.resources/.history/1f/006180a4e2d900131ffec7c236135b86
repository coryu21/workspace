import static com.googlecode.javacv.cpp.opencv_highgui.CV_FOURCC;
import static com.googlecode.javacv.cpp.opencv_highgui.cvSaveImage;

import java.awt.AWTException;
import java.awt.Rectangle;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;

import com.googlecode.javacv.FrameRecorder;
import com.googlecode.javacv.FrameRecorder.Exception;
import com.googlecode.javacv.OpenCVFrameRecorder;
import com.googlecode.javacv.cpp.opencv_core.IplImage;

public class ScreenCapture extends Thread{
	private Robot capture;
	private Rectangle area;
	private BufferedImage bi;
	private String fileName;
	private String path;
	private IplImage frame;
	private File file;

	public ScreenCapture(String path) {
		this.path = path;
		this.fileName = path + "\\Capture.avi";
		try {
			capture = new Robot();
		} catch (AWTException e) {
			e.printStackTrace();
		}
	}

	public void capture() {
		area = new Rectangle(Toolkit.getDefaultToolkit().getScreenSize());
		FrameRecorder recorder = new OpenCVFrameRecorder(fileName, 640, 480);
		recorder.setVideoCodec(CV_FOURCC('M', 'J', 'P', 'G'));
		recorder.setPixelFormat(1);
		recorder.setFrameRate(22);

		try {
			recorder.start();
			for (int i = 0; i < 1; i++) {
				bi = capture.createScreenCapture(area);
				file = new File(path + "temp.jpg");
				ImageIO.write(bi, "jpg", file);
				//frame = cvLoadImage(path + "temp.jpg");
				//recorder.record(frame);
			}
			recorder.stop();
		} catch (Exception | IOException e) {
			e.printStackTrace();
		}

		System.out.println("촬영이 완료되었습니다");
	}
	
	public void run(){
		capture();
	}

}
